@page "/checkout"
@using BlazorApp1.Services
@using BlazorApp1.Components
@using System.Linq
@using System.Text.RegularExpressions;
@using static BlazorApp1.Components.Pages.Transcript
@inject CartService Cart
@inject DegreeService DegreeService
@inject Transcript.StudentRecord student

<div class="container">
    <h1 class="mb-4" style="padding-top:60px !important;" >Your Degree Planner</h1>

    <!-- Degree Type Selector -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="btn-group" role="group">
                <button type="button" class="btn @(currentDegreeType == DegreeType.Major ? "btn-primary" : "btn-outline-primary")" 
                @onclick="() => SwitchDegreeType(DegreeType.Major)">
                    Majors
                </button>
                <button type="button" class="btn @(currentDegreeType == DegreeType.Minor ? "btn-primary" : "btn-outline-primary")" 
                @onclick="() => SwitchDegreeType(DegreeType.Minor)">
                    Minors
                </button>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-8">
            <div class="input-group">
                <input type="text" class="form-control"
                @bind-value="searchTerm"
                @bind-value:event="oninput"
                @onkeyup="FilterDegrees"
                placeholder="Search for a degree..." />
                <button class="btn btn-primary" @onclick="ClearSearch">Clear</button>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(searchTerm) && filteredDegrees.Any())
    {
        <div class="degree-search-results mb-4">
            <h5>Search Results:</h5>
            <ul class="list-group">
                @foreach (var degree in filteredDegrees.Take(5))
                {
                    <li class="list-group-item list-group-item-action" @onclick="() => SelectDegree(degree.DegreeDescription!)">
                        @degree.DegreeDescription
                    </li>
                }
            </ul>
        </div>
    }

    @if (!string.IsNullOrEmpty(selectedMajor))
    {
        var degreeProgram = GetSelectedDegree();

        @if (degreeProgram is Major major)
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h2>@major.DegreeDescription</h2>
                    @if (major.CreditRequirement.HasValue)
                    {
                        <p class="lead">Total Credits Required: @major.CreditRequirement</p>
                    }
                </div>

                <div class="card-body">
                    @if (!string.IsNullOrEmpty(major.Description))
                    {
                        <div class="mb-4">
                            <p>@major.Description</p>
                        </div>
                    }

                    @{
                        // Extract years and terms from structured output
                        var yearsAndTerms = ExtractYearsAndTerms(major.StructuredOutput);
                    }

                    @foreach (var year in yearsAndTerms)
                    {
                        <h3 class="mt-4">@year.Key</h3>

                        @foreach (var term in year.Value)
                        {
                            <h4 class="mt-3">@term</h4>
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Course</th>
                                            <th>Credits</th>
                                            <th>Mark Complete</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            var termCourses = GetCoursesForTerm(major, term);
                                        }
                                        @foreach (var cr in termCourses)
                                        {
                                            <tr>
                                                <td>
                                                    @{
                                                        string displayName = cr.Name;
                                                        string footnoteKey = "";

                                                        var footnoteMatch = System.Text.RegularExpressions.Regex.Match(cr.Name, @"(\d+)$");
                                                        if (footnoteMatch.Success)
                                                        {
                                                            footnoteKey = footnoteMatch.Groups[1].Value;
                                                            displayName = cr.Name.Substring(0, cr.Name.Length - footnoteKey.Length);
                                                        }
                                                    }
                                                    @displayName
                                                    @if (!string.IsNullOrEmpty(footnoteKey) && major.Footnotes.ContainsKey(footnoteKey))
                                                    {
                                                        <sup>@footnoteKey</sup>
                                                        <div class="footnote-text small text-muted">
                                                            @major.Footnotes[footnoteKey]
                                                        </div>
                                                    }
                                                </td>
                                                <td>@cr.Credits</td>
                                                <td>
                                                    <input type="checkbox"
                                                    @onchange="_ => ToggleCompletion(cr.Name)"
                                                    checked="@student.HasCompleted(cr.Name)" />
                                                </td>
                                                <td>
                                                    @if (cr.Name.Contains("UCORE") || cr.Name.Contains("[") && cr.Name.Contains("]"))
                                                    {
                                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => OpenUCORESelector(cr)">
                                                            Select UCORE course
                                                        </button>
                                                    }
                                                    else if (cr.Name.Contains("Elective") || HasFootnoteForSubstitution(cr.Name, major.Footnotes))
                                                    {
                                                        <button class="btn btn-sm btn-outline-secondary" @onclick="() => OpenCourseSelector(cr)">
                                                            Select course
                                                        </button>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    }

                    @if (major.Footnotes.Count > 0)
                    {
                        <div class="mt-4">
                            <h4>Footnotes</h4>
                            <ol>
                                @foreach (var kvp in major.Footnotes)
                                {
                                    <li id="footnote-@kvp.Key">@kvp.Value</li>
                                }
                            </ol>
                        </div>
                    }
                </div>

                <div class="card-footer">
                    <button class="btn btn-success" @onclick="AddToCart">Add to Cart</button>
                </div>
            </div>
        }
        else if (degreeProgram is Minor minor)
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h2>@minor.DegreeDescription</h2>
                    <p class="lead">Total Credits Required: @minor.TotalCredits</p>
                    @if (minor.UpperDivisionCredits > 0)
                    {
                        <p>Upper-Division Credits: @minor.UpperDivisionCredits</p>
                    }
                    @if (minor.MinimumGPA.HasValue)
                    {
                        <p>Minimum GPA: @minor.MinimumGPA.Value.ToString("F1")</p>
                    }
                </div>

                <div class="card-body">
                    @if (minor.StructuredContent.Any())
                    {
                        <div class="mb-4">
                            @foreach(var content in minor.StructuredContent)
                            {
                                <p>@content</p>
                            }
                        </div>
                    }

                    <h4 class="mt-4">Courses</h4>
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Course</th>
                                    <th>Mark Complete</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var course in minor.Courses)
                                {
                                    <tr>
                                        <td>@course</td>
                                        <td>
                                            <input type="checkbox"
                                            @onchange="_ => ToggleCompletion(course)"
                                            checked="@student.HasCompleted(course)" />
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    @if (minor.Notes.Any())
                    {
                        <div class="mt-4">
                            <h4>Notes</h4>
                            <ul>
                                @foreach (var note in minor.Notes)
                                {
                                    <li>@note.Replace("&nbsp;", " ").Trim()</li>
                                }
                            </ul>
                        </div>
                    }
                </div>

                <div class="card-footer">
                    <button class="btn btn-success" @onclick="AddToCart">Add to Cart</button>
                </div>
            </div>
        }
    }

    @if (showUCORESelector)
    {
        <div class="modal" style="display: block; background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Select UCORE Course</h5>
                        <button type="button" class="btn-close" @onclick="CloseUCORESelector"></button>
                    </div>
                    <div class="modal-body">
                        <div class="input-group mb-3">
                            <input type="text" class="form-control" @bind-value="ucoreSearchTerm"
                            placeholder="Search for UCORE courses..." />
                        </div>

                        <div class="ucore-categories">
                            <div class="d-flex flex-wrap">
                                @foreach (string category in ucoreCategories)
                                {
                                    <button class="btn @(selectedUCORECategory == category ? "btn-primary" : "btn-outline-primary") m-1"
                                    @onclick="() => SelectUCORECategory(category)">
                                        @category
                                    </button>
                                }
                            </div>
                        </div>

                        <div class="mt-3">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Course</th>
                                        <th>Credits</th>
                                        <th>Description</th>
                                        <th>Select</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var course in filteredUCORECourses)
                                    {
                                        <tr>
                                            <td>@course.Name</td>
                                            <td>@course.Credits</td>
                                            <td>@course.Description</td>
                                            <td>
                                                <button class="btn btn-sm btn-primary"
                                                @onclick="() => SelectUCORECourse(course)">
                                                    Select
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseUCORESelector">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (showCourseSelector)
    {
        <div class="modal" style="display: block; background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Select Course</h5>
                        <button type="button" class="btn-close" @onclick="CloseCourseSelector"></button>
                    </div>
                    <div class="modal-body">
                        <div class="input-group mb-3">
                            <input type="text" class="form-control" @bind-value="courseSearchTerm"
                            placeholder="Search for courses..." />
                        </div>

                        <div class="mt-3">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Course</th>
                                        <th>Credits</th>
                                        <th>Select</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var course in filteredSubstitutionCourses)
                                    {
                                        <tr>
                                            <td>@course.Name</td>
                                            <td>@course.Credits</td>
                                            <td>
                                                <button class="btn btn-sm btn-primary"
                                                @onclick="() => SelectSubstitutionCourse(course)">
                                                    Select
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseCourseSelector">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (Cart.Items.Any())
    {
        <div class="card mt-4">
            <div class="card-header">
                <h3>Your Cart</h3>
            </div>
            <div class="card-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Degree</th>
                            <th>Type</th>
                            <th>Credits</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Cart.Items)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td>@item.Type</td>
                                <td>@item.Credits</td>
                                <td>
                                    <button class="btn btn-sm btn-danger" @onclick="() => RemoveFromCart(item)">
                                        Remove
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="card-footer">
                <button class="btn btn-primary" @onclick="ProcessCheckout">
                    Proceed to Transcript
                </button>
            </div>
        </div>
    }
</div>

@code {
    // The currently selected major or minor (by name/description)
    string? selectedMajor;
    // The current search term entered by the user for degree search
    string searchTerm = "";
    // The list of degrees filtered by search and type (major/minor)
    List<Degree> filteredDegrees = new List<Degree>();
    // The current degree type being viewed (Major or Minor)
    DegreeType currentDegreeType = DegreeType.Major; // Default to Major view

    // Enum to distinguish between Major and Minor degree types
    public enum DegreeType
    {
        Major,
        Minor
    }

    // Variables for course replacement modals/selectors
    bool showUCORESelector = false; // Controls visibility of UCORE course selector modal
    bool showCourseSelector = false; // Controls visibility of general course selector modal
    string ucoreSearchTerm = ""; // Search term for filtering UCORE courses
    string courseSearchTerm = ""; // Search term for filtering substitution courses
    Major.CourseRequirement? currentCourse; // The course currently being replaced/selected
    List<CourseInfo> filteredUCORECourses = new List<CourseInfo>(); // Filtered UCORE courses for modal
    List<CourseInfo> filteredSubstitutionCourses = new List<CourseInfo>(); // Filtered substitution courses for modal
    string selectedUCORECategory = ""; // Currently selected UCORE category for filtering
    // List of all possible UCORE categories
    List<string> ucoreCategories = new List<string> { "ROOT", "COMM", "QUAN", "WRTG", "ARTS", "BSCI", "DIVR", "EQJS", "HUM", "PSCI", "SSCI" };

    // Model for displaying course info in selectors
    public class CourseInfo
    {
        public string Name { get; set; } // Course name (with UCORE category if applicable)
        public string Credits { get; set; } // Number of credits for the course
        public string Description { get; set; } = ""; // Course description

        public CourseInfo(string name, string credits, string description = "")
        {
            Name = name;
            Credits = credits;
            Description = description;
        }
    }

    // Called when the component is initialized
    protected override void OnInitialized()
    {
        // Populate the filteredDegrees list with all degrees for initial search
        FilterDegrees();
    }

    // Filters the list of degrees based on search term and current degree type
    void FilterDegrees()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            // If no search term, show all degrees of the selected type
            var allMajors = DegreeService.GetAllMajors();
            if (currentDegreeType == DegreeType.Major)
            {
                filteredDegrees = allMajors.Where(d => d is Major).Cast<Degree>().ToList();
            }
            else
            {
                filteredDegrees = allMajors.Where(d => d is Minor).Cast<Degree>().ToList();
            }
        }
        else
        {
            // Filter degrees by search term and type
            var allMajors = DegreeService.GetAllMajors();
            if (currentDegreeType == DegreeType.Major)
            {
                filteredDegrees = allMajors
                    .Where(d => d is Major && d.DegreeDescription != null && 
                           d.DegreeDescription.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                    .Cast<Degree>()
                    .ToList();
            }
            else
            {
                filteredDegrees = allMajors
                    .Where(d => d is Minor && d.DegreeDescription != null && 
                           d.DegreeDescription.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                    .Cast<Degree>()
                    .ToList();
            }
        }
    }

    // Switches between Major and Minor view, resets selection and filters
    void SwitchDegreeType(DegreeType type)
    {
        currentDegreeType = type;
        selectedMajor = null; // Clear selected major/minor when switching
        FilterDegrees();
    }

    // Selects a degree by name/description, clears search and filtered list
    void SelectDegree(string degreeName)
    {
        selectedMajor = degreeName;
        searchTerm = "";
        filteredDegrees.Clear();
    }

    // Gets the currently selected degree object (Major or Minor) from all degrees
    Degree? GetSelectedDegree()
    {
        if (string.IsNullOrEmpty(selectedMajor)) return null;

        var allMajors = DegreeService.GetAllMajors();
        if (currentDegreeType == DegreeType.Major)
        {
            return allMajors.FirstOrDefault(d => d is Major && d.DegreeDescription == selectedMajor);
        }
        else
        {
            return allMajors.FirstOrDefault(d => d is Minor && d.DegreeDescription == selectedMajor);
        }
    }

    // Clears the search term and resets the filtered degree list
    void ClearSearch()
    {
        searchTerm = "";
        FilterDegrees();
    }

    // Extracts a dictionary of years and their terms from a structured output list
    Dictionary<string, List<string>> ExtractYearsAndTerms(List<string> outputs)
    {
        var result = new Dictionary<string, List<string>>();
        string currentYear = "";
        foreach (var output in outputs)
        {
            // Year headers are marked with "====== ... ======"
            if (output.Contains("Year"))
            {
                currentYear = output;
                result[currentYear] = new List<string>();
            }
            // Term headers are marked with "---- ... ----"
            else if (output.StartsWith("---- ") && !string.IsNullOrEmpty(currentYear))
            {
                string term = output;
                result[currentYear].Add(term);
            }
        }
        return result;
    }

    // Gets the list of course requirements for a specific term in a major
    List<Major.CourseRequirement> GetCoursesForTerm(Major major, string term)
    {
        var courseList = new List<Major.CourseRequirement>();
        var outputs = major.StructuredOutput;
        // Find the index of the term header
        int termIndex = outputs.IndexOf($"{term}");
        if (termIndex == -1) return courseList;

        // Find the next marker (next term or year)
        int nextMarkerIndex = outputs.Count;
        for (int i = termIndex + 1; i < outputs.Count; i++)
        {
            if (outputs[i].StartsWith("term") || outputs[i].StartsWith("====== "))
            {
                nextMarkerIndex = i;
                break;
            }
        }

        // Extract courses between the current term and the next marker
        for (int i = termIndex + 1; i < nextMarkerIndex; i++)
        {
            var line = outputs[i];
            if (line.StartsWith("Course: "))
            {
                // Parse course name and credits
                var parts = line.Substring("Course: ".Length).Split(", Credits: ");
                if (parts.Length == 2)
                {
                    var courseName = parts[0];
                    var credits = parts[1];
                    // Try to find the course in the requirements list
                    var course = major.CourseRequirements.FirstOrDefault(c => c.Name == courseName);
                    if (course != null)
                    {
                        courseList.Add(course);
                    }
                    else
                    {
                        // If not found, create a new requirement object
                        courseList.Add(new Major.CourseRequirement
                        {
                            Name = courseName,
                            Credits = credits
                        });
                    }
                }
            }
        }
        return courseList;
    }

    // Checks if a course has a footnote that allows for substitution/alternative
    bool HasFootnoteForSubstitution(string courseName, Dictionary<string, string> footnotes)
    {
        var footnoteMatch = System.Text.RegularExpressions.Regex.Match(courseName, @"(\d+)$");
        if (footnoteMatch.Success)
        {
            string footnoteKey = footnoteMatch.Groups[1].Value;
            if (footnotes.ContainsKey(footnoteKey))
            {
                string footnoteText = footnotes[footnoteKey];
                // Look for keywords indicating substitution/alternatives
                return footnoteText.Contains("substitute") || footnoteText.Contains("approved") ||
                       footnoteText.Contains("alternative") || footnoteText.Contains("or");
            }
        }
        return false;
    }

    // Toggles the completion status of a course for the student
    void ToggleCompletion(string courseName)
    {
        // Treat "complete" as "Not-Taken" vs "Got a grade"
        if (selectedMajor == null) return;

        string? creditStr = null;
        int credits = 0;

        if (currentDegreeType == DegreeType.Major)
        {
            creditStr = DegreeService.GetCredit(selectedMajor, courseName);
            if (!string.IsNullOrEmpty(creditStr) && int.TryParse(creditStr, out int parsedCredits))
            {
                credits = parsedCredits;
            }
        }
        else
        {
            // For minors, use a default value (could be improved)
            credits = 3;
        }

        // Toggle between "Not-Taken" and "A" (should prompt for actual grade in future)
        if (student.HasCompleted(courseName))
            student.SetGrade(courseName, credits, "Not-Taken");
        else
            student.SetGrade(courseName, credits, "A");
    }

    // Opens the UCORE course selector modal for a course
    void OpenUCORESelector(Major.CourseRequirement course)
    {
        currentCourse = course;
        showUCORESelector = true;
        selectedUCORECategory = "";
        ucoreSearchTerm = "";
        // Populate the UCORE course list (mock data for now)
        filteredUCORECourses = GetMockUCORECourses();
    }

    // Closes the UCORE selector modal
    void CloseUCORESelector()
    {
        showUCORESelector = false;
    }

    // Selects a UCORE category and filters the course list
    void SelectUCORECategory(string category)
    {
        selectedUCORECategory = category;
        FilterUCORECourses();
    }

    // Filters the UCORE course list by selected category and search term
    void FilterUCORECourses()
    {
        var allCourses = GetMockUCORECourses();
        filteredUCORECourses = allCourses
            .Where(c => (string.IsNullOrEmpty(selectedUCORECategory) || c.Name.Contains($"[{selectedUCORECategory}]")) &&
                       (string.IsNullOrEmpty(ucoreSearchTerm) ||
                        c.Name.Contains(ucoreSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                        c.Description.Contains(ucoreSearchTerm, StringComparison.OrdinalIgnoreCase)))
            .ToList();
    }

    // Selects a specific UCORE course to replace the generic requirement
    void SelectUCORECourse(CourseInfo course)
    {
        if (currentCourse == null || selectedMajor == null) return;

        // Find the current major
        var major = DegreeService.GetAllMajors().FirstOrDefault(m => 
            m is Major && m.DegreeDescription == selectedMajor) as Major;

        if (major == null) return;
            
        // Replace the course requirement with the selected course
        int index = major.CourseRequirements.IndexOf(currentCourse);
        if (index >= 0)
        {
            major.CourseRequirements[index] = new Major.CourseRequirement
                {
                    Name = course.Name,
                    Credits = course.Credits
                };
        }

        CloseUCORESelector();
    }

    // Opens the general course selector modal for a course
    void OpenCourseSelector(Major.CourseRequirement course)
    {
        currentCourse = course;
        showCourseSelector = true;
        courseSearchTerm = "";
        // In a full implementation, would populate filteredSubstitutionCourses here
        //filteredSubstitutionCourses = GetSubstitutionCourses(course);
    }

    // Closes the general course selector modal
    void CloseCourseSelector()
    {
        showCourseSelector = false;
    }

    // Selects a substitution course to replace the current requirement
    void SelectSubstitutionCourse(CourseInfo course)
    {
        if (currentCourse == null || selectedMajor == null) return;

        var major = DegreeService.GetAllMajors().FirstOrDefault(m => 
            m is Major && m.DegreeDescription == selectedMajor) as Major;
            
        if (major == null) return;
            
        int index = major.CourseRequirements.IndexOf(currentCourse);
        if (index >= 0)
        {
            major.CourseRequirements[index] = new Major.CourseRequirement
                {
                    Name = course.Name,
                    Credits = course.Credits
                };
        }

        CloseCourseSelector();
    }

    // Returns a mock list of UCORE courses for demonstration purposes
    List<CourseInfo> GetMockUCORECourses()
    {
        var ucoreCourses = new List<CourseInfo>();
        // Iterate through all campus and term data (from CourseScrape)
        foreach (var campus in CourseScrape.CampusesList)
        {
            foreach (var term in campus.Terms)
            {
                foreach (var course in term.Courses)
                {
                    foreach (var section in course.Sections)
                    {
                        foreach (var detail in section.CourseDescriptionDetails)
                        {
                            // Only add courses that have UCORE designation
                            if (!string.IsNullOrEmpty(detail.UCORE))
                            {
                                string ucoreCategory = ExtractUCORECategory(detail.UCORE);
                                // Format the display name with UCORE category
                                string displayName = $"{course.CourseName} [{ucoreCategory}]";
                                // Add the course if it's not already in the list
                                if (!ucoreCourses.Any(c => c.Name == displayName))
                                {
                                    ucoreCourses.Add(new CourseInfo(
                                        name: displayName,
                                        credits: section.Credits,
                                        description: detail.CourseDescription
                                    ));
                                }
                            }
                        }
                    }
                }
            }
        }
        return ucoreCourses;
    }

    // Extracts the UCORE category code from a UCORE text string
    private string ExtractUCORECategory(string ucoreText)
    {
        // Try to extract the category from brackets (e.g., [ARTS])
        var match = Regex.Match(ucoreText, @"\[([A-Z]+)\]");
        if (match.Success)
        {
            return match.Groups[1].Value;
        }
        // If not found, look for known category names in the text
        foreach (var category in ucoreCategories)
        {
            if (ucoreText.Contains(category, StringComparison.OrdinalIgnoreCase))
            {
                return category;
            }
        }
        // Default to ROOT if no category found
        return "ROOT";
    }

    // Adds the currently selected degree to the cart
    void AddToCart()
    {
        if (string.IsNullOrEmpty(selectedMajor)) return;

        var degree = GetSelectedDegree();
        if (degree == null) return;

        int credits = 0;
        if (degree is Major major)
        {
            credits = major.CreditRequirement ?? major.TotalCredits;
        }
        else if (degree is Minor minor)
        {
            credits = minor.TotalCredits;
        }

        Cart.AddItem(new CartItem
        {
            Name = degree.DegreeDescription ?? "Unknown Degree",
            Type = currentDegreeType.ToString(),
            Credits = credits
        });
    }

    // Removes an item from the cart
    void RemoveFromCart(CartItem item)
    {
        Cart.RemoveItem(item);
    }

    // Handles the checkout process (e.g., navigation to transcript page)
    void ProcessCheckout()
    {
        // This would navigate to the transcript page
    }

    // Model for items in the cart
    public class CartItem
    {
        public required string Name { get; set; } // Degree name
        public required string Type { get; set; } // Degree type (Major/Minor)
        public int Credits { get; set; } // Total credits for the degree
    }
}
