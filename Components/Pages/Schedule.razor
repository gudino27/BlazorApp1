@page "/Schedule"
@inject IJSRuntime JSRuntime
@using BlazorApp1.Services
@inject CourseService DataService

<h3>Course Scheduler</h3>

<div class="scheduler-container">
    <div class="selection-panel">
        <!-- Campus & Term Selectors -->
        <div class="form-group">
            <label>Campus:</label>
            <select class="form-control" @bind="SelectedCampus">
                @foreach (var campus in AvailableCampuses)
                {
                    <option value="@campus">@campus</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Term:</label>
            <select class="form-control" @bind="SelectedTerm">
                @foreach (var term in AvailableTerms)
                {
                    <option value="@term">@term</option>
                }
            </select>
        </div>
        <button class="btn btn-primary" @onclick="LoadCourses">Load Courses</button>

        <hr />

        <!-- Search Controls -->
        <button class="btn btn-secondary" @onclick="ToggleSearch">@(ShowSearchForm ? "Hide" : "Show") Course Search</button>

        @if (ShowSearchForm)
        {
            <div class="course-search mt-3">
                <input class="form-control" placeholder="Type course name or number..." @bind="SearchQuery" @bind:event="oninput" />
                <div class="search-results">
                    @if (FilteredCourses.Any())
                    {
                        <ul class="list-group mt-2">
                            @foreach (var course in FilteredCourses)
                            {
                                <li class="list-group-item course-item" @onclick="() => SelectCourse(course)">
                                    <div class="course-name">@course.CourseName</div>
                                    <div class="course-title">@course.Title</div>
                                </li>
                            }
                        </ul>
                    }
                    else if (!string.IsNullOrEmpty(SearchQuery))
                    {
                        <div class="no-results">No courses found matching "@SearchQuery"</div>
                    }
                </div>
            </div>
        }

        <!-- Credit Summary -->
        <div class="credit-summary mt-3">
            <h5>Credit Summary</h5>
            <div class="credit-total">Total Credits: @TotalCredits</div>
            <div class="course-count">Courses: @ScheduledSections.Count</div>
        </div>

        <!-- Selected Course Details -->
        @if (SelectedCourse != null)
        {
            <div class="selected-course mt-3">
                <h4>@SelectedCourse.CourseName</h4>
                <div class="course-title mb-2">@SelectedCourse.Title</div>
                <div class="sections-list">
                    @foreach (var sec in SelectedCourse.Sections)
                    {
                        <div class="section-item @(IsScheduleConflict(sec) ? "conflict-warning" : "")" @onclick="() => ShowSectionDetail(sec)">
                            <div class="section-code">Section @sec.SectionNumber</div>
                            <div class="section-details">
                                <span class="section-time">@FormatTime(sec)</span>
                                <span class="section-status @GetStatusClass(sec.Status)">@sec.Status</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <div class="schedule-panel">
        <!-- RENDER THE WEEKLY SCHEDULE -->

        @RenderWeeklyCalendar()
    </div>
</div>

<!-- Section Detail Modal -->
@if (DisplayedSection != null)
{
    <div class="section-detail-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h4>@(SelectedCourse?.CourseName) Section @DisplayedSection.SectionNumber</h4>
                <button type="button" class="close-button" @onclick="@(() => DisplayedSection = null)">Ã—</button>
            </div>
            <div class="modal-body">
                <div class="section-basic-info">
                    <div class="info-row">
                        <span class="label">Class Number:</span>
                        <span class="value">@DisplayedSection.ClassNumber</span>
                    </div>
                    <div class="info-row">
                        <span class="label">Credits:</span>
                        <span class="value">
                            @if (DisplayedSection.Credits == "V")
                            {
                                <input type="number" min="1" max="18" @bind="VariableCredits" class="credit-input" />
                            }
                            else
                            {
                                @DisplayedSection.Credits
                            }
                        </span>
                    </div>
                    <div class="info-row">
                        <span class="label">Time:</span>
                        <span class="value">@GetAccurateTime(DisplayedSection)</span>
                    </div>
                    <div class="info-row">
                        <span class="label">Location:</span>
                        <span class="value">@DisplayedSection.Location</span>
                    </div>
                    <div class="info-row">
                        <span class="label">Instructor:</span>
                        <span class="value">@DisplayedSection.Instructor</span>
                    </div>
                    <div class="info-row">
                        <span class="label">Status:</span>
                        <span class="value @GetStatusClass(DisplayedSection.Status)">
                            @DisplayedSection.Status (@DisplayedSection.SpotsLeft spots @(DisplayedSection.Status == "Waitlist" ? "on waitlist" : "left"))
                        </span>
                    </div>
                </div>

                @if (GetCourseDescriptionDetails(DisplayedSection) != null)
                {
                    <div class="section-extra-details">
                        <h5>Course Details</h5>
                        @{
                            var details = GetCourseDescriptionDetails(DisplayedSection);
                            if (!string.IsNullOrEmpty(details.CourseDescription))
                            {
                                <div class="detail-item">
                                    <div class="detail-label">Description:</div>
                                    <div class="detail-value">@details.CourseDescription</div>
                                </div>
                            }
                            if (!string.IsNullOrEmpty(details.CoursePrerequisite))
                            {
                                <div class="detail-item">
                                    <div class="detail-label">Prerequisites:</div>
                                    <div class="detail-value">@details.CoursePrerequisite</div>
                                </div>
                            }
                            if (!string.IsNullOrEmpty(details.SpecialCourseFee))
                            {
                                <div class="detail-item">
                                    <div class="detail-label">Special Fee:</div>
                                    <div class="detail-value">@details.SpecialCourseFee</div>
                                </div>
                            }
                            if (!string.IsNullOrEmpty(details.UCORE))
                            {
                                <div class="detail-item">
                                    <div class="detail-label">UCORE:</div>
                                    <div class="detail-value">@details.UCORE</div>
                                </div>
                            }
                            if (!string.IsNullOrEmpty(details.InstructionMode))
                            {
                                <div class="detail-item">
                                    <div class="detail-label">Instruction Mode:</div>
                                    <div class="detail-value">@details.InstructionMode</div>
                                </div>
                            }
                            if (details.Meetings.Any())
                            {
                                <div class="detail-item">
                                    <div class="detail-label">Meeting Times:</div>
                                    <div class="detail-value">
                                        @foreach (var meeting in details.Meetings)
                                        {
                                            <div>@meeting.Days @meeting.Time - @meeting.Location</div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                    </div>
                }

                <div class="modal-actions">
                    @if (IsScheduleConflict(DisplayedSection))
                    {
                        <div class="conflict-alert">
                             This section conflicts with your current schedule
                        </div>
                    }
                    <button class="btn @(IsScheduleConflict(DisplayedSection) ? "btn-warning" : "btn-success")" 
                            @onclick="() => AddSection(DisplayedSection)">
                        @(IsScheduleConflict(DisplayedSection) ? "Add Despite Conflict" : "Add to Schedule")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .scheduler-container {
        display: flex;
        gap: 20px;
    }

    .selection-panel {
        flex: 1;
        min-width: 300px;
        max-width: 400px;
    }

    .schedule-panel {
        flex: 2;
    }

    .course-item {
        cursor: pointer;
    }

    .course-item:hover {
        background-color: #f0f0f0;
    }

    .section-item {
        padding: 10px;
        margin: 5px 0;
        border: 1px solid #ddd;
        border-radius: 4px;
        cursor: pointer;
    }

    .section-item:hover {
        background-color: #f5f5f5;
    }

    .conflict-warning {
        border-left: 4px solid orange;
    }

    .status-open {
        color: green;
    }

    .status-full {
        color: red;
    }

    .status-waitlist {
        color: orange;
    }

    .weekly-calendar {
        width: 100%;
        border-collapse: collapse;
    }

    .weekly-calendar th, .weekly-calendar td {
        border: 1px solid #ddd;
    }

    .weekly-calendar th {
        background-color: #f5f5f5;
        text-align: center;
    }

    .calendar-event {
        background-color: #e3f2fd;
        padding: 2px 4px;
        margin: 1px;
        font-size: 12px;
        border-radius: 3px;
        overflow: hidden;
    }

    .calendar-event.conflict {
        background-color: #ffebee;
        border-left: 3px solid red;
    }

    .section-detail-modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: white;
        width: 80%;
        max-width: 600px;
        max-height: 90vh;
        border-radius: 4px;
        overflow-y: auto;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        padding: 15px;
        border-bottom: 1px solid #ddd;
    }

    .close-button {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
    }

    .modal-body {
        padding: 15px;
    }

    .info-row {
        display: flex;
        padding: 5px 0;
    }

    .label {
        font-weight: bold;
        width: 100px;
    }

    .detail-item {
        margin-bottom: 10px;
    }

    .detail-label {
        font-weight: bold;
    }

    .detail-value {
        margin-left: 10px;
    }

    .modal-actions {
        margin-top: 20px;
        text-align: right;
    }

    .conflict-alert {
        color: red;
        margin-bottom: 10px;
    }

    .credit-input {
        width: 60px;
    }
    .weekly-schedule-container {
    width: 100%;
    overflow-x: auto;
}

.arranged-header {
    background-color: #f5f5f5;
}

.arranged-title {
    font-weight: bold;
    text-align: center;
    padding: 10px;
    border-top: 2px solid #ddd;
}

.arranged-course {
    background-color: #fafafa;
}

.calendar-event.arranged {
    background-color: #f5f8fa;
    padding: 8px;
    margin: 4px 0;
    border-left: 3px solid #87CEEB;
}

.event-instructor {
    font-size: 11px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}
</style>

@code {
    List<string> AvailableCampuses = new() { "Everett", "Global", "Pullman", "Spokane", "Tri-Cities", "Vancouver" };
    List<string> AvailableTerms = new() { "Fall 2025", "Spring 2025", "Summer 2025" };

    string SelectedCampus { get; set; } = "Everett";
    string SelectedTerm { get; set; } = "Fall 2025";

    List<CourseData> AllLoadedCourses = new();
    List<CourseData> CoursesToDisplay = new();

    bool ShowSearchForm { get; set; } = false;
    string SearchQuery { get; set; } = "";
    CourseData SelectedCourse { get; set; }
    SectionData DisplayedSection { get; set; }

    List<ScheduledSection> ScheduledSections = new();
    int VariableCredits { get; set; } = 3; // Default variable credit value

    // Class to hold scheduled sections with additional info
    class ScheduledSection
    {
        public SectionData Section { get; set; }
        public CourseData Course { get; set; }
        public int Credits { get; set; }
        public TimeSpan StartTime { get; set; }
        public TimeSpan EndTime { get; set; }
        public List<string> Days { get; set; } = new List<string>();
    }

    int TotalCredits => ScheduledSections.Sum(s => s.Credits);

    void ToggleSearch() => ShowSearchForm = !ShowSearchForm;

    void LoadCourses()
    {
        CoursesToDisplay.Clear();
        AllLoadedCourses.Clear();
        
        // Get courses for the selected campus and term
        var campusCourses = DataService.GetCourses(SelectedCampus, SelectedTerm);
        AllLoadedCourses.AddRange(campusCourses);
        
        // For Summer term, include Global campus courses if not already selected
        if (SelectedTerm == "Summer 2025" && SelectedCampus != "Global")
        {
            var globalCourses = DataService.GetCourses("Global", SelectedTerm);
            AllLoadedCourses.AddRange(globalCourses);
        }
        
        CoursesToDisplay = AllLoadedCourses;
    }

    IEnumerable<CourseData> FilteredCourses =>
        string.IsNullOrWhiteSpace(SearchQuery)
            ? CoursesToDisplay.Take(100) // Limit to first 100 courses when no search to improve performance
            : CoursesToDisplay.Where(c => !string.IsNullOrWhiteSpace(c.CourseName) &&
                                         (c.CourseName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                                          (!string.IsNullOrWhiteSpace(c.Title) && 
                                           c.Title.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))));

    void SelectCourse(CourseData course)
    {
        SelectedCourse = course;
        DisplayedSection = null;
    }

    void ShowSectionDetail(SectionData sec)
    {
        DisplayedSection = sec;
        // Set a sensible default for variable credits based on course details
        if (sec.Credits == "V")
        {
            var details = GetCourseDescriptionDetails(sec);
            if (details != null && !string.IsNullOrEmpty(details.CourseCredit))
            {
                // Try to parse credit range from description
                var creditText = details.CourseCredit;
                if (creditText.Contains("1-"))
                {
                    VariableCredits = 3; // Default to mid-range
                }
                else
                {
                    VariableCredits = 3; // Fallback default
                }
            }
            else
            {
                VariableCredits = 3;
            }
        }
    }

    async Task AddSection(SectionData sec)
    {
        // Check if section is already in schedule
        var existingSection = ScheduledSections.FirstOrDefault(s => 
            s.Section.ClassNumber == sec.ClassNumber);
            
        if (existingSection != null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "This section is already in your schedule.");
            return;
        }

        // Confirm if full or waitlisted
        if (sec.Status == "Full" || sec.Status == "Waitlist")
        {
            var msg = sec.Status == "Full"
                ? "This class is full. Add it anyway?"
                : $"This class is waitlisted. You are number {sec.SpotsLeft} on the waitlist. Add it anyway?";
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", msg);
            if (!confirmed)
            {
                return;
            }
        }

        // Confirm if there's a time conflict
        if (IsScheduleConflict(sec))
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                "This section conflicts with your current schedule. Add it anyway?");
            if (!confirmed)
            {
                return;
            }
        }

        // Add to schedule
        var courseCredits = sec.Credits == "V" ? VariableCredits : 
            int.TryParse(sec.Credits, out int cr) ? cr : 0;
            
        var scheduledSection = new ScheduledSection
        {
            Section = sec,
            Course = SelectedCourse,
            Credits = courseCredits
        };
        
        // Parse meeting times
        ParseScheduleTimes(scheduledSection);
        
        ScheduledSections.Add(scheduledSection);
        await JSRuntime.InvokeVoidAsync("alert", "Section added to schedule!");
    }

    void ParseScheduleTimes(ScheduledSection scheduled)
{
    // Initialize the Days list as strings instead of chars
    scheduled.Days = new List<string>();
    
    // First try to get accurate times from CourseDescriptionDetails
    var details = GetCourseDescriptionDetails(scheduled.Section);
    if (details != null && details.Meetings.Any())
    {
        var meeting = details.Meetings.First(); // Using first meeting for simplicity
        
        if (!string.IsNullOrEmpty(meeting.Days))
        {
            // Parse the days string and add each day
            ParseDaysString(meeting.Days, scheduled.Days);
        }

        if (!string.IsNullOrEmpty(meeting.Time))
        {
            var timeParts = meeting.Time.Split('-');
            if (timeParts.Length == 2)
            {
                ParseTimeString(timeParts[0].Trim(), out TimeSpan startTime);
                ParseTimeString(timeParts[1].Trim(), out TimeSpan endTime);
                
                scheduled.StartTime = startTime;
                scheduled.EndTime = endTime;
                return;
            }
        }
    }
    
    // Fallback to main section data
    if (!string.IsNullOrEmpty(scheduled.Section.Days))
    {
        // Parse the days and add them to the scheduled section
        ParseDaysString(scheduled.Section.Days, scheduled.Days);
    }
    
    if (!string.IsNullOrEmpty(scheduled.Section.Time))
    {
        var timeParts = scheduled.Section.Time.Split('-');
        if (timeParts.Length == 2)
        {
            ParseTimeString(timeParts[0].Trim(), out TimeSpan startTime);
            ParseTimeString(timeParts[1].Trim(), out TimeSpan endTime);
            
            scheduled.StartTime = startTime;
            scheduled.EndTime = endTime;
        }
    }
}

// Helper method to parse day codes
private void ParseDaysString(string daysString, List<string> daysList)
{
    if (string.IsNullOrEmpty(daysString))
        return;
        
    // Handle "ARRG" or similar
    if (daysString.Contains("ARRG") || daysString.Contains("TBA"))
    {
        return; // No specific days for arranged sections
    }
    
    // Split by commas if present
    var dayParts = daysString.Split(',');
    
    foreach (var part in dayParts)
    {
        string day = part.Trim();
        
        // Handle multi-character day codes
        if (day == "TH")
        {
            daysList.Add("TH");
        }
        else if (day=="TU")
        {
             daysList.Add("TU");
        }
        else if (day.Length > 1)
        {
            // For other multi-character codes, add each character as a separate day
            foreach (char c in day)
            {
                if ("MWFS".Contains(c))
                {
                    daysList.Add(c.ToString());
                }
            }
        }
        else if (day.Length == 1)
        {
            // Single character day code
            char c = day[0];
            if ("MTWFS".Contains(c))
            {
                daysList.Add(c.ToString());
            }
            else if (c == 'R')
            {
                // 'R' is sometimes used for Thursday
                daysList.Add("TH");
            }
        }
    }
}

    bool ParseTimeString(string timeStr, out TimeSpan result)
    {
        result = TimeSpan.Zero;
        
        // Handle military time format (e.g., "14:30")
        if (timeStr.Contains(':') && !timeStr.Contains("AM") && !timeStr.Contains("PM"))
        {
            var parts = timeStr.Split(':');
            if (parts.Length == 2 && int.TryParse(parts[0], out int hour) && int.TryParse(parts[1], out int minute))
            {
                result = new TimeSpan(hour, minute, 0);
                return true;
            }
            return false;
        }
        
        // Handle standard AM/PM format
        DateTime parsedTime;
        if (DateTime.TryParse(timeStr, out parsedTime))
        {
            result = parsedTime.TimeOfDay;
            return true;
        }
        
        return false;
    }

    string GetAccurateTime(SectionData section)
    {
        var details = GetCourseDescriptionDetails(section);
        if (details != null && details.Meetings.Any())
        {
            return string.Join(", ", details.Meetings.Select(m => $"{m.Days} {m.Time}"));
        }
        
        return $"{section.Days} {section.Time}";
    }

    CourseDescriptionDetails GetCourseDescriptionDetails(SectionData section)
    {
        if (section.CourseDescriptionDetails != null && section.CourseDescriptionDetails.Any())
        {
            return section.CourseDescriptionDetails.First();
        }
        return null;
    }

    string FormatTime(SectionData sec)
    {
        if (string.IsNullOrWhiteSpace(sec.Days) || string.IsNullOrWhiteSpace(sec.Time))
        {
            return "ARRGT";
        }
        return $"{sec.Days} {sec.Time}";
    }

    string GetStatusClass(string status)
    {
        return status?.ToLower() switch
        {
            "open" => "status-open",
            "full" => "status-full",
            "waitlist" => "status-waitlist",
            _ => ""
        };
    }

    bool IsScheduleConflict(SectionData section)
{
    if (string.IsNullOrWhiteSpace(section.Days) || string.IsNullOrWhiteSpace(section.Time))
    {
        return false; // ARRGT sections don't conflict
    }

    // Create a temporary scheduled section for comparison
    var tempSection = new ScheduledSection
    {
        Section = section,
        Course = SelectedCourse
    };
    
    ParseScheduleTimes(tempSection);
    
    foreach (var scheduled in ScheduledSections)
    {
        // Skip if no days or times (arranged sections)
        if (scheduled.Days.Count == 0 || tempSection.Days.Count == 0)
            continue;
            
        // Check for day overlap - convert to set of days
        bool sharedDay = scheduled.Days.Intersect(tempSection.Days).Any();
        if (!sharedDay) 
            continue;
            
        // Check for time overlap
        bool timeOverlap = !(scheduled.EndTime <= tempSection.StartTime || scheduled.StartTime >= tempSection.EndTime);
        if (timeOverlap)
            return true;
    }
    
    return false;
}

    //
    // ------------------- THE WEEKLY SCHEDULE RENDERING --------------------
    //

private RenderFragment RenderWeeklyCalendar() => builder =>
{
    // Days of the week with proper formatting
    var days = new[] { "M", "TU", "W", "TH", "F" };
    var dayNames = new[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" };
    
    // Hours range - use hourly slots for better readability
    var startHour = 7;  // 7am
    var endHour = 22;   // 10pm

    int seq = 0;
    builder.OpenElement(seq++, "div");
    builder.AddAttribute(seq++, "class", "weekly-schedule-container");
    
    // Centered heading
    builder.OpenElement(seq++, "h3");
    builder.AddAttribute(seq++, "class", "text-center mb-3");
    builder.AddContent(seq++, "Weekly Schedule");
    builder.CloseElement(); // </h3>
    
    builder.OpenElement(seq++, "table");
    builder.AddAttribute(seq++, "class", "weekly-calendar");

    // Header row
    builder.OpenElement(seq++, "thead");
    builder.OpenElement(seq++, "tr");

    // Time column header
    builder.OpenElement(seq++, "th");
    builder.AddAttribute(seq++, "style", "width: 80px;");
    builder.AddContent(seq++, "Time");
    builder.CloseElement(); // </th>

    // Day column headers
    for (int i = 0; i < days.Length; i++)
    {
        builder.OpenElement(seq++, "th");
        builder.AddContent(seq++, dayNames[i]);
        builder.CloseElement(); // </th>
    }

    builder.CloseElement(); // </tr>
    builder.CloseElement(); // </thead>

    // Table body
    builder.OpenElement(seq++, "tbody");
    
    // Generate hourly time slots
    for (int hour = startHour; hour < endHour; hour++)
    {
        for (int minute = 0; minute < 60; minute += 30)
        {
            var currentTime = new TimeSpan(hour, minute, 0);
            
            builder.OpenElement(seq++, "tr");
            
            // Time cell
            builder.OpenElement(seq++, "td");
            builder.AddAttribute(seq++, "class", "time-cell");
            builder.AddContent(seq++, FormatTimeLabel(hour, minute));
            builder.CloseElement(); // </td>
            
            // One cell per day
            for (int d = 0; d < days.Length; d++)
            {
                builder.OpenElement(seq++, "td");
                
                // Find all sections for this day and time slot
                var matchingSections = ScheduledSections.Where(s => 
                    HasDay(s.Days, days[d]) && 
                    s.StartTime <= currentTime && 
                    s.EndTime > currentTime).ToList();
                    
                foreach (var scheduled in matchingSections)
                {
                    // Only render at the start time to avoid duplicates
                    if (Math.Abs(scheduled.StartTime.TotalMinutes - currentTime.TotalMinutes) < 15)
                    {
                        // Calculate time slot span (how many 30-min rows)
                        var duration = scheduled.EndTime - scheduled.StartTime;
                        int rowSpan = (int)Math.Ceiling(duration.TotalMinutes / 30.0);
                        
                        // Find conflicts
                        var conflicts = ScheduledSections
                            .Where(s => s != scheduled && 
                                        HasDay(s.Days, days[d]) &&
                                        s.StartTime < scheduled.EndTime && 
                                        s.EndTime > scheduled.StartTime)
                            .Any();
                            
                        builder.OpenElement(seq++, "div");
                        builder.AddAttribute(seq++, "class", $"calendar-event {(conflicts ? "conflict" : "")}");
                        builder.AddAttribute(seq++, "style", $"height: {Math.Max(22, 22 * rowSpan)}px;");
                        
                        // Course info
                        builder.OpenElement(seq++, "div");
                        builder.AddAttribute(seq++, "class", "event-title");
                        builder.AddContent(seq++, $"{scheduled.Course.CourseName} {scheduled.Section.SectionNumber}");
                        builder.CloseElement(); // </div>
                        
                        builder.OpenElement(seq++, "div");
                        builder.AddAttribute(seq++, "class", "event-time");
                        builder.AddContent(seq++, $"{FormatTimeSpan(scheduled.StartTime)} - {FormatTimeSpan(scheduled.EndTime)}");
                        builder.CloseElement(); // </div>
                        
                        // Get instructor from CourseDescriptionDetails if available
                        string instructor = GetInstructorName(scheduled.Section);
                        
                        builder.OpenElement(seq++, "div");
                        builder.AddAttribute(seq++, "class", "event-instructor");
                        builder.AddContent(seq++, instructor);
                        builder.CloseElement(); // </div>
                        
                        builder.OpenElement(seq++, "div");
                        builder.AddAttribute(seq++, "class", "event-location");
                        builder.AddContent(seq++, scheduled.Section.Location);
                        builder.CloseElement(); // </div>
                        
                        builder.CloseElement(); // </div>
                    }
                }
                
                builder.CloseElement(); // </td>
            }
            
            builder.CloseElement(); // </tr>
        }
    }
    
    // Add Arranged Courses section at the bottom
    var arrangedSections = ScheduledSections.Where(s => 
        string.IsNullOrWhiteSpace(s.Section.Days) || 
        s.Section.Days.Contains("ARRG") ||
        s.Days.Count == 0).ToList();
        
    if (arrangedSections.Any())
    {
        // Header for Arranged Courses
        builder.OpenElement(seq++, "tr");
        builder.AddAttribute(seq++, "class", "arranged-header");
        
        builder.OpenElement(seq++, "td");
        builder.AddAttribute(seq++, "colspan", "6");
        builder.AddAttribute(seq++, "class", "arranged-title");
        builder.AddContent(seq++, "Arranged Courses (No Set Meeting Time)");
        builder.CloseElement(); // </td>
        
        builder.CloseElement(); // </tr>
        
        // One row per arranged course
        foreach (var scheduled in arrangedSections)
        {
            builder.OpenElement(seq++, "tr");
            builder.AddAttribute(seq++, "class", "arranged-course");
            
            builder.OpenElement(seq++, "td");
            builder.AddContent(seq++, "ARRG");
            builder.CloseElement(); // </td>
            
            builder.OpenElement(seq++, "td");
            builder.AddAttribute(seq++, "colspan", "5");
            
            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", "calendar-event arranged");
            
            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", "event-title");
            builder.AddContent(seq++, $"{scheduled.Course.CourseName} {scheduled.Section.SectionNumber}");
            builder.CloseElement(); // </div>
            
            builder.OpenElement(seq++, "div");
            builder.AddContent(seq++, $"{scheduled.Course.Title} ({scheduled.Credits} cr)");
            builder.CloseElement(); // </div>
            
            string instructor = GetInstructorName(scheduled.Section);
            
            builder.OpenElement(seq++, "div");
            builder.AddContent(seq++, $"Instructor: {instructor}");
            builder.CloseElement(); // </div>
            
            builder.CloseElement(); // </div>
            
            builder.CloseElement(); // </td>
            
            builder.CloseElement(); // </tr>
        }
    }
    
    builder.CloseElement(); // </tbody>
    builder.CloseElement(); // </table>
    builder.CloseElement(); // </div>
};

// Helper methods for schedule display
private string FormatTimeLabel(int hour, int minute)
{
    return new DateTime(2000, 1, 1, hour, minute, 0).ToString("h:mm tt");
}

private bool HasDay(List<string> daysList, string day)
{
    if (daysList == null || !daysList.Any())
        return false;
        
    return daysList.Contains(day);
}

private string GetInstructorName(SectionData section)
{
    // First try to get from CourseDescriptionDetails
    var details = GetCourseDescriptionDetails(section);
    if (details != null  && details.Instructors.Any())
    {
        return string.Join(", ", details.Instructors);
    }
    
    // Fallback to section data
    return section.Instructor ?? "TBA";
}
private string FormatTimeSpan(TimeSpan ts) =>
    new DateTime(1,1,1).Add(ts).ToString("h:mm tt");

}
